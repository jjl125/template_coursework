---
title: "Palmer Penguins Analysis"
subtitle: 'Reproducing the Palmer Penguins Analysis in the Coursework Template'
author: "06055044"
format:
  html:
    toc: true
    highlight: tango
    self-contained: true
    df-print: paged
  pdf: default
format-links: false
bibliography: "MSc_Statistics_coursework_template_quarto.bib" 
---

<style type="text/css">
h1{
  font-size: 24pt;
}
h2{
  font-size: 18pt;
}
body{
  font-size: 12pt;
}
</style>

```{r setup, include = FALSE, tidy=TRUE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
include_solutions <- TRUE
```
```{r setup2, include=FALSE, tidy=TRUE}
require(rmarkdown)
require(knitr)
require(kableExtra)
# Put any library imports and other preamble here.

```

<!---
This Rmarkdown document is intended to provide a basic template that you may use throughout the course, and to introduce you to basic functionality of the open-source bookdown R package for writing Rmarkdown documents [@xie2016bookdown].

Please note:

- Rmarkdown syntax for the title and document style;
- bookdown syntax to label and reference equations;
- bookdown syntax to referencing literate and provide a bib file;
- kable syntax to build clean and clear tables that can be referenced;
- Rmarkdown inline functions to collect and print all code used.
-->

# Question 1

In this question we install the palmerpenguins package and load the dataset it contains.

```{r}
install.packages("palmerpenguins", repos = "https://cloud.r-project.org")
library(palmerpenguins)
```

# Question 2

In this question we add an additional column of Logical data called MissingData which indicates if there is any missing value for each row.

```{r}
penguins$MissingData <- apply(penguins, 1, anyNA)
```

The first part of the resulting data set is shown below in @tbl-palmer.

```{r}
#| label: tbl-palmer
#| tbl-cap: "First part of the penguins data set with the added MissingData column."

library(knitr)
kable(head(penguins))
```

# Question 3

In this question we find the average bill length and flipper length for each species of penguin.

```{r}
#| echo: false
adelie_bills <- penguins$bill_length_mm[penguins$species == "Adelie"]
chinstrap_bills <- penguins$bill_length_mm[penguins$species == "Chinstrap"]
gentoo_bills <- penguins$bill_length_mm[penguins$species == "Gentoo"]

adelie_bills_mean <- mean(adelie_bills, trim = 0, na.rm = TRUE)
chinstrap_bills_mean <- mean(chinstrap_bills, trim = 0, na.rm = TRUE)
gentoo_bills_mean <- mean(gentoo_bills, trim = 0, na.rm = TRUE)

adelie_flippers <- penguins$flipper_length_mm[penguins$species == "Adelie"]
chinstrap_flippers <- penguins$flipper_length_mm[penguins$species == "Chinstrap"]
gentoo_flippers <- penguins$flipper_length_mm[penguins$species == "Gentoo"]

adelie_flippers_mean <- mean(adelie_flippers, trim = 0, na.rm = TRUE)
chinstrap_flippers_mean <- mean(chinstrap_flippers, trim = 0, na.rm = TRUE)
gentoo_flippers_mean <- mean(gentoo_flippers, trim = 0, na.rm = TRUE)

```

For the Adelie species, the average bill length is `r adelie_bills_mean` and the average flipper length is `r adelie_flippers_mean`.

For the Chinstrap species, the average bill length is `r chinstrap_bills_mean` and the average flipper length is `r chinstrap_flippers_mean`.

For the Gentoo species, the average bill length is `r gentoo_bills_mean` and the average flipper length is `r gentoo_flippers_mean`.

# Question 4

In this question we Write a function species_mean() that calculates the mean of a numeric variable for each species and document it with Roxygen2-style comments.

```{r}
install.packages("roxygen2", repos = "https://cloud.r-project.org")

#' Calculates the mean of a numeric variable for each species in the penguins data set
#'
#' @param varName A Character representing the variable name of the numeric column to calculate means for each species
#'
#' @returns A Data Frame containing a column for each unique species and a column for the mean of varName for the corresponding species
#' @export
#'
#' @examples 
species_mean <- function(varName) {
  unique_species <- unique(penguins$species)
  species_mean_df <- data.frame()
  
  for (species in unique_species) {
    species_varName <- penguins[[varName]][penguins$species == species]
    species_varName_mean <- mean(species_varName, trim = 0, na.rm = TRUE)
    
    new_row <- data.frame ("Species" = species, "Mean" = species_varName_mean)
    species_mean_df <- rbind(species_mean_df, new_row)
  }
  
  return(species_mean_df)
}
```

# Question 5

In this question, we generate a scatter plot of flipper length vs. body mass with different symbols and colours for each species. This is displayed below in @fig-sim-data

```{r}
#| label: fig-sim-data
#| tbl-cap: "Scatter Plot of Flipper Length vs. Body Mass for Each Species."

plot(x = penguins$flipper_length_mm,
     y = penguins$body_mass_g,
     col = penguins$species, 
     pch = 15 + as.numeric(penguins$species),
     main = "Flipper Length vs. Body Mass for Each Species",
     xlab = "Flipper Length (mm)",
     ylab = "Body Mass (g)"
)

legend(
"bottomright",
title = "Species",
legend = c("Adelie", "Chinstrap", "Gentoo"),
pch = 16:18,
col = 1:3,
bty = "n")
```

# Question 6

In this question, we add points to the plot generated in Question 5 representing the mean values of Flipper Length and Body Mass for each species. The original plot from Question 5 is shown below in @fig-example-plots-1 and the plot with added mean values of Flipper Length and Body Mass for each species is shown in  @fig-example-plots-2

```{r}
#| layout-ncol: 2
#| label: fig-example-plots
#| fig-cap: "Scatter Plot of Flipper Length vs. Body Mass for Each Species."
#| fig-subcap: 
#|   - "Original Plot from Question 5"
#|   - "Plot with Added Mean Values of Flipper Length and Body Mass for each species"

plot(x = penguins$flipper_length_mm,
     y = penguins$body_mass_g,
     col = penguins$species, 
     pch = 15 + as.numeric(penguins$species),
     main = "Flipper Length vs. Body Mass for Each Species",
     xlab = "Flipper Length (mm)",
     ylab = "Body Mass (g)"
)

legend(
"bottomright",
title = "Species",
legend = c("Adelie", "Chinstrap", "Gentoo"),
pch = 16:18,
col = 1:3,
bty = "n")

plot(x = penguins$flipper_length_mm,
     y = penguins$body_mass_g,
     col = penguins$species, 
     pch = 15 + as.numeric(penguins$species),
     main = "Flipper Length vs. Body Mass for Each Species",
     xlab = "Flipper Length (mm)",
     ylab = "Body Mass (g)"
)

legend(
"bottomright",
title = "Mean",
legend = c("Adelie", "Chinstrap", "Gentoo"),
pch = 16:18,
col = c("purple", "orange", "yellow"),
bty = "n")

flippers_mean_df <- species_mean("flipper_length_mm")
body_mass_mean_df <- species_mean("body_mass_g")

points(x = flippers_mean_df[flippers_mean_df$Species == "Adelie", "Mean"], 
       y = body_mass_mean_df[body_mass_mean_df$Species == "Adelie", "Mean"], 
       col = "purple", 
       pch = 16
)

points(x = flippers_mean_df[flippers_mean_df$Species == "Chinstrap", "Mean"], 
       y = body_mass_mean_df[body_mass_mean_df$Species == "Chinstrap", "Mean"], 
       col = "orange", 
       pch = 17
)


points(x = flippers_mean_df[flippers_mean_df$Species == "Gentoo", "Mean"], 
       y = body_mass_mean_df[body_mass_mean_df$Species == "Gentoo", "Mean"], 
       col = "yellow", 
       pch = 18
)
```

Adding some reference to @testref.

In this question we seek to generate samples from the standard Cauchy distribution, with pdf given by
\begin{equation}
  p(x) = \frac{1}{\pi (1 + x^2)}, \quad x \in \mathbb{R}.
  (\#eq:1)
\end{equation}
The cdf associated with \@ref(eq:1) is given by
\begin{equation}
  F(x) = \frac{1}{\pi}\arctan(x) + \frac{1}{2}.
  (\#eq:2)
\end{equation}

**Part a.**  We apply the inversion method as described by @graham2013stochastic. We first compute the generalised inverse of the cdf \@ref(eq:2).  To this end, let $y\in [0,1]$, then

\begin{align}
    y &= F(x), \quad \iff (\#eq:3a) \\
    y &= \frac{1}{\pi}\arctan(x) + \frac{1}{2} \quad \iff \\
    y-\frac{1}{2}  &= \frac{1}{\pi}\arctan(x)  \quad \iff \\
    \pi\left(y-\frac{1}{2}\right)  &= \arctan(x)  \quad \iff \\
    x &= \tan\left(\pi\left(y-\frac{1}{2}\right)\right). 
\end{align}

By the inversion method [@graham2013stochastic], if $Y \sim U[0,1]$, then 

\begin{equation}
  X = \tan\left(\pi\left(Y-\frac{1}{2}\right)\right),
  (\#eq:4)
\end{equation}

```{r, echo=FALSE}

### Question 1a

generate_cauchy_samples <- function(n) {
  # Generate 'n' uniform random numbers between 0 and 1
  u <- runif(n)
  
  # Apply the inverse CDF formula to get Cauchy samples
  samples <- tan(pi * (u - 0.5))  
  return(samples)
}

num_samples = 1000

# Generate samples from the standard Cauchy distribution
cauchy_samples <- generate_cauchy_samples(num_samples)

```


**Part b.**   The empirical cdf based on $N$ samples $x_1, \ldots, x_N$ is defined to be
              $$
                \widehat{F}(t) = \frac{1}{N}\sum_{i = 1}^N \mathbf{1}[x_i \leq t], \quad x\in \mathbb{t}.
              $$
To generate the empirical cdf in R, we perform the following steps:
            
a. Generate $N$ samples from the distribution using the inversion method, as detailed in the previous question.  
b. Sort the samples in ascending order $x_1 \leq x_2 \leq x_3 \leq \ldots \leq x_N$.
c. The empirical CDF at value $x_i$ is given by $i/N$.  


In the following figure we plot the empirical cdf based on 1000 samples (black line), and compare against the analytical cdf (red line).  

```{r echo=FALSE}

### Question 1b

# Sort the samples in ascending order
sorted_samples <- sort(cauchy_samples)

# Calculate the cumulative probabilities for each sample
cumulative_probs <- (1:num_samples) / num_samples

x_values <- seq(-100, 100,  length.out = 1000)
cdf_values <- pcauchy(x_values)

# Plot the empirical CDF
plot(sorted_samples, 
     cumulative_probs, 
     type = "s", 
     xlab = "x", 
     ylab = "Empirical CDF", 
     main = "Empirical CDF of Standard Cauchy Distribution", 
     lwd = 2, lty = 1, xlim = c(-100,100))
lines(x_values, cdf_values, type = "l", 
      xlab = "x", ylab = "CDF", main = "CDF of Standard Cauchy Distribution", 
      col = 'red', lty = 2)
```

**Part c.**  We shall use the samples to compute the empirical cdf for the values $x = 0.5, 1, 10$.  

```{r echo=FALSE}

### Question 1c

calculate_ecdf <- function(x) {
    return(sum(sorted_samples <= x)/num_samples)
}

df <- data.frame(x = c(0.5, 1.0, 10.0), 
                ecdf = c(calculate_ecdf(0.5), 
                         calculate_ecdf(1.0), 
                         calculate_ecdf(10.0))
                )
kbl(df,
    caption = 'Empirical CDF', 
    label = 'ecdf',
    digits = 2) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    font_size = 12)
```


# Code appendix

Rather than re-paste all the code to the appendix, here is a trick which makes the markdown file output all the code (without) execution in the appendix, without any duplication.

Please keep in mind to format the code so that the entire code is clearly visible and does not run into the margins of the pdf version.  

```{r ref.label=knitr::all_labels(), echo = T, eval = F}
```

# References
